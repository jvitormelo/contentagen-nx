---



export const prerender = true;

import { Image } from "astro:assets";
import { Button } from "@packages/ui/components/button";
import BaseHead from "../../components/BaseHead.astro";
import Footer from "../../components/Footer.astro";
import FormattedDate from "../../components/FormattedDate.astro";
import Navbar from "../../components/Navbar.astro";
import { SITE_DESCRIPTION, SITE_TITLE } from "../../consts";
import { agentId, sdk } from "../../contentagen";

export async function getStaticPaths() {
   const postsPerPage = 5;

   // Get total count first to calculate pages
   const response = await sdk.listContentByAgent({
      agentId: agentId,
      limit: 1, // Just get count
      status: ["approved"],
   });
   const totalPosts = response.total;
   const totalPages = Math.ceil(totalPosts / postsPerPage);

   const paths = [];
   for (let page = 1; page <= totalPages; page++) {
      const pageResponse = await sdk.listContentByAgent({
         agentId: agentId,
         limit: postsPerPage,
         page: page,
         status: ["approved"],
      });
      const postsRaw = pageResponse.posts.sort(
         (a, b) =>
            new Date(b.createdAt).valueOf() - new Date(a.createdAt).valueOf(),
      );

      // Fetch images for posts that have them
      const posts = await Promise.all(
         postsRaw.map(async (post) => {
            if (post.image) {
               return post; // Already has image data
            }
            if (post.imageUrl) {
               try {
                  const imageData = await sdk.getContentImage({
                     contentId: post.id,
                  });
                  return { ...post, image: imageData };
               } catch (error) {
                  console.error(
                     `Error fetching image for post ${post.id}:`,
                     error,
                  );
                  return post;
               }
            }
            return post;
         }),
      );

      paths.push({
         params: { page: page.toString() },
         props: {
            currentPage: page,
            posts,
            totalPages,
            totalPosts,
         },
      });
   }

   return paths;
}

const { posts, currentPage, totalPages } = Astro.props;
---

<!doctype html>
<html lang="en">
   <head>
      <BaseHead
         title={currentPage === 1 ? SITE_TITLE : `${SITE_TITLE} - Page ${currentPage}`}
         description={currentPage === 1 ? SITE_DESCRIPTION : `${SITE_DESCRIPTION} - Page ${currentPage} of ${totalPages}`}
      />
   </head>
   <body>
      <Navbar />
      <main class="max-w-4xl mx-auto px-4 py-12">
         <section>
            <ul class="grid gap-8 md:grid-cols-2 list-none m-0 p-0">
               {
                  posts.map((post, index) => (
                      <li
                         class={index === 0 ? "md:col-span-2 text-center" : ""}
                      >
<a href={`/${post.meta.slug}/`} class="block">
  {post.image ? (
    <img
      width={720}
      height={360}
      src={`data:${post.image.contentType};base64,${post.image.data}`}
      alt={post.meta?.title ?? ""}
      class="w-full rounded-xl mb-3 transition-shadow hover:shadow-lg aspect-video object-cover"
      loading="lazy"
    />
  ) : post.imageUrl ? (
    <Image
      width={720}
      height={360}
      src={post.imageUrl}
      alt={post.meta?.title ?? ""}
      class="w-full rounded-xl mb-3 transition-shadow hover:shadow-lg aspect-video object-cover"
      format="webp"
      loading="lazy"
    />
  ) : null}
  <h4
     class={`text-xl font-semibold leading-snug text-gray-900 dark:text-gray-100 transition-colors ${index === 0 ? "md:text-4xl" : ""}`}
   >
    {post.meta?.title ?? ""}
  </h4>
  <p class="text-sm text-gray-500">
    <FormattedDate date={ new Date(post.createdAt)} />
  </p>
</a>
                     </li>
                  ))
               }
            </ul>
         </section>

         <!-- Pagination -->
         {totalPages > 1 && (
            <section class="mt-12 flex justify-center">
               <nav class="flex items-center space-x-2">
                  {currentPage > 1 && (
                     <a href={currentPage === 2 ? "/" : `/page/${currentPage - 1}`}>
                        <Button variant="outline" size="sm">
                           Previous
                        </Button>
                     </a>
                  )}

                  {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                     const pageNum = Math.max(1, Math.min(totalPages - 4, currentPage - 2)) + i;
                     if (pageNum > totalPages) return null;
                     return (
                        <a href={pageNum === 1 ? "/" : `/page/${pageNum}`}>
                           <Button
                              variant={pageNum === currentPage ? "default" : "outline"}
                              size="sm"
                           >
                              {pageNum}
                           </Button>
                        </a>
                     );
                  })}

                  {currentPage < totalPages && (
                     <a href={`/page/${currentPage + 1}`}>
                        <Button variant="outline" size="sm">
                           Next
                        </Button>
                     </a>
                  )}
               </nav>
            </section>
         )}
      </main>
      <Footer />
   </body>
</html>
